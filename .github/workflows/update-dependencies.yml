name: Update Maven Dependencies and Confluence

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      confluence_url:
        description: 'Confluence URL'
        required: false
        default: 'https://odoraf.atlassian.ne/wiki'
      confluence_username:
        description: 'Confluence username/email'
        required: false
        default: 'poseidonog@gmail.com'
      confluence_page_id:
        description: 'Confluence page ID to update'
        required: false
        default: '393218'

jobs:
  simulate-dependency-updates:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: java/my-app
    outputs:
      has_changes: ${{ steps.diff.outputs.has_changes }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Simulate dependency changes
        run: |
          echo "Simulating dependency version upgrades..."
          echo "Using pre-created pom.xml.old and pom.xml.new files"
          ls -la pom.xml*
      
      - name: Generate dependency diff
        id: diff
        run: |
          if diff pom.xml.old pom.xml.new > pom-diff.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Dependency updates found:"
            cat pom-diff.txt
          fi
      
      - name: Upload artifacts
        if: steps.diff.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-updates
          path: |
            java/my-app/pom.xml.old
            java/my-app/pom.xml.new
            java/my-app/pom-diff.txt
      
      - name: Create summary
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          echo "## Dependency Updates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat pom-diff.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  update-confluence:
    runs-on: ubuntu-latest
    needs: simulate-dependency-updates
    if: needs.simulate-dependency-updates.outputs.has_changes == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v4
        with:
          name: dependency-updates
          path: artifacts
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 lxml
      
      - name: Parse dependency changes
        id: parse
        run: |
          python3 << 'EOF'
          import re
          import json
          from datetime import datetime
          
          def parse_pom_diff(diff_file):
              """Parse the pom.xml diff to extract dependency changes."""
              changes = []
              
              try:
                  with open(diff_file, 'r') as f:
                      diff_content = f.read()
                  
                  lines = diff_content.split('\n')
                  
                  i = 0
                  while i < len(lines):
                      line = lines[i]
                      
                      # Look for dependency or plugin blocks
                      if '<artifactId>' in line:
                          artifact_match = re.search(r'<artifactId>(.*?)</artifactId>', line)
                          if artifact_match:
                              artifact = artifact_match.group(1)
                              
                              # Look ahead for version changes
                              for j in range(i, min(i + 10, len(lines))):
                                  if lines[j].startswith('<') and '<version>' in lines[j]:
                                      old_version_match = re.search(r'<version>(.*?)</version>', lines[j])
                                      if old_version_match and j + 1 < len(lines):
                                          # Check next line for new version
                                          if lines[j + 1].startswith('>') and '<version>' in lines[j + 1]:
                                              new_version_match = re.search(r'<version>(.*?)</version>', lines[j + 1])
                                              if new_version_match:
                                                  changes.append({
                                                      'artifact': artifact,
                                                      'old_version': old_version_match.group(1),
                                                      'new_version': new_version_match.group(1)
                                                  })
                                                  break
                      i += 1
              
              except FileNotFoundError:
                  print("No diff file found")
              
              return changes
          
          # Parse the changes
          changes = parse_pom_diff('artifacts/java/my-app/pom-diff.txt')
          
          # Generate Confluence HTML content
          html_content = f"""
          <h2>Maven Dependency Updates - {datetime.now().strftime('%Y-%m-%d')}</h2>
          <p>The following dependencies were updated:</p>
          <table>
            <thead>
              <tr>
                <th>Artifact</th>
                <th>Old Version</th>
                <th>New Version</th>
              </tr>
            </thead>
            <tbody>
          """
          
          for change in changes:
              html_content += f"""
              <tr>
                <td>{change['artifact']}</td>
                <td>{change['old_version']}</td>
                <td>{change['new_version']}</td>
              </tr>
          """
          
          html_content += """
            </tbody>
          </table>
          <p><strong>Total updates:</strong> """ + str(len(changes)) + """</p>
          """
          
          # Save to file
          with open('confluence-content.html', 'w') as f:
              f.write(html_content)
          
          # Save changes as JSON for GitHub output
          with open('changes.json', 'w') as f:
              json.dump(changes, f)
          
          print(f"Found {len(changes)} dependency updates")
          EOF
      
      - name: Update Confluence Page
        env:
          CONFLUENCE_URL: ${{ inputs.confluence_url || secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ inputs.confluence_username || secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          CONFLUENCE_PAGE_ID: ${{ inputs.confluence_page_id || secrets.CONFLUENCE_PAGE_ID }}
        run: |
          python3 << 'EOF'
          import os
          import json
          import requests
          from requests.auth import HTTPBasicAuth
          
          # Confluence credentials
          confluence_url = os.environ.get('CONFLUENCE_URL')
          username = os.environ.get('CONFLUENCE_USERNAME')
          api_token = os.environ.get('CONFLUENCE_API_TOKEN')
          page_id = os.environ.get('CONFLUENCE_PAGE_ID')
          
          if not all([confluence_url, username, api_token, page_id]):
              print("Missing Confluence credentials. Skipping update.")
              exit(0)
          
          # Read the HTML content to append
          with open('confluence-content.html', 'r') as f:
              new_content = f.read()
          
          # Setup authentication and headers for v2 API
          auth = HTTPBasicAuth(username, api_token)
          headers = {'Content-Type': 'application/json'}
          
          # Get current page using v2 API
          # API Reference: https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get
          get_url = f"{confluence_url}/api/v2/pages/{page_id}?body-format=storage"
          response = requests.get(get_url, auth=auth, headers=headers)
          
          if response.status_code != 200:
              print(f"Failed to get page: {response.status_code}")
              print(response.text)
              exit(1)
          
          page_data = response.json()
          current_version = page_data['version']['number']
          current_content = page_data['body']['storage']['value']
          page_title = page_data['title']
          
          # Append new content to existing content
          updated_content = current_content + "\n" + new_content
          
          # Update the page using v2 API
          # API Reference: https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-put
          update_data = {
              "id": page_id,
              "status": "current",
              "title": page_title,
              "body": {
                  "representation": "storage",
                  "value": updated_content
              },
              "version": {
                  "number": current_version + 1,
                  "message": "Updated by GitHub Actions - Maven dependency updates"
              }
          }
          
          put_url = f"{confluence_url}/api/v2/pages/{page_id}"
          response = requests.put(put_url, auth=auth, headers=headers, json=update_data)
          
          if response.status_code == 200:
              print("Successfully updated Confluence page!")
              print(f"Page URL: {confluence_url}/pages/viewpage.action?pageId={page_id}")
              print(f"Updated to version {current_version + 1}")
          else:
              print(f"Failed to update page: {response.status_code}")
              print(response.text)
              exit(1)
          EOF
      
      - name: Upload Confluence content
        uses: actions/upload-artifact@v4
        with:
          name: confluence-update
          path: |
            confluence-content.html
            changes.json
