name: Update Maven Dependencies and Confluence

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      confluence_url:
        description: 'Confluence URL'
        required: false
        default: 'https://odoraf.atlassian.net/wiki'
      confluence_username:
        description: 'Confluence username/email'
        required: false
        default: 'poseidonog@gmail.com'
      confluence_page_id:
        description: 'Confluence page ID to update'
        required: false
        default: '393218'

jobs:
  update-dependencies-and-confluence:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Simulate dependency changes
        working-directory: java/my-app
        run: |
          echo "Simulating dependency version upgrades..."
          echo "Using pre-created pom.xml.old and pom.xml.new files"
          ls -la pom.xml*
      
      - name: Generate dependency diff
        id: diff
        working-directory: java/my-app
        run: |
          if diff pom.xml.old pom.xml.new > pom-diff.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Dependency updates found:"
            cat pom-diff.txt
          fi
      
      - name: Create summary
        if: steps.diff.outputs.has_changes == 'true'
        working-directory: java/my-app
        run: |
          echo "## Dependency Updates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat pom-diff.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 lxml
      
      - name: Parse dependency changes
        id: parse
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          python3 << 'EOF'
          import re
          import json
          import xml.etree.ElementTree as ET
          from datetime import datetime
          
          def parse_pom_file(pom_file):
              """Parse POM file to extract dependencies and their versions."""
              deps = {}
              try:
                  tree = ET.parse(pom_file)
                  root = tree.getroot()
                  ns = {'maven': 'http://maven.apache.org/POM/4.0.0'}
                  
                  # Parse dependencies
                  for dep in root.findall('.//maven:dependency', ns):
                      artifact_elem = dep.find('maven:artifactId', ns)
                      version_elem = dep.find('maven:version', ns)
                      group_elem = dep.find('maven:groupId', ns)
                      
                      if artifact_elem is not None and version_elem is not None:
                          artifact = artifact_elem.text
                          group = group_elem.text if group_elem is not None else ''
                          deps[artifact] = {
                              'groupId': group,
                              'version': version_elem.text
                          }
                  
                  # Parse plugins
                  for plugin in root.findall('.//maven:plugin', ns):
                      artifact_elem = plugin.find('maven:artifactId', ns)
                      version_elem = plugin.find('maven:version', ns)
                      
                      if artifact_elem is not None and version_elem is not None:
                          artifact = artifact_elem.text
                          deps[artifact] = {
                              'groupId': 'org.apache.maven.plugins',
                              'version': version_elem.text
                          }
              
              except Exception as e:
                  print(f"Error parsing POM file: {e}")
              
              return deps
          
          def compare_pom_files(old_pom, new_pom):
              """Compare two POM files and extract version changes."""
              old_deps = parse_pom_file(old_pom)
              new_deps = parse_pom_file(new_pom)
              
              changes = []
              
              for artifact, new_info in new_deps.items():
                  if artifact in old_deps:
                      old_version = old_deps[artifact]['version']
                      new_version = new_info['version']
                      
                      if old_version != new_version:
                          changes.append({
                              'artifact': artifact,
                              'groupId': new_info['groupId'],
                              'old_version': old_version,
                              'new_version': new_version
                          })
              
              return changes
          
          # Parse the changes by comparing POM files
          changes = compare_pom_files(
              'java/my-app/pom.xml.old',
              'java/my-app/pom.xml.new'
          )
          
          # Generate Confluence HTML content
          html_content = f"""
          <h2>Maven Dependency Updates - {datetime.now().strftime('%Y-%m-%d')}</h2>
          <p>The following dependencies were updated:</p>
          <table>
            <thead>
              <tr>
                <th>Artifact</th>
                <th>Old Version</th>
                <th>New Version</th>
              </tr>
            </thead>
            <tbody>
          """
          
          for change in changes:
              html_content += f"""
              <tr>
                <td>{change['artifact']}</td>
                <td>{change['old_version']}</td>
                <td>{change['new_version']}</td>
              </tr>
          """
          
          html_content += """
            </tbody>
          </table>
          <p><strong>Total updates:</strong> """ + str(len(changes)) + """</p>
          """
          
          # Save to file
          with open('confluence-content.html', 'w') as f:
              f.write(html_content)
          
          # Save changes as JSON for GitHub output
          with open('changes.json', 'w') as f:
              json.dump(changes, f)
          
          print(f"Found {len(changes)} dependency updates")
          EOF
      
      - name: Update Confluence Page
        if: steps.diff.outputs.has_changes == 'true'
        env:
          CONFLUENCE_URL: ${{ inputs.confluence_url || secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ inputs.confluence_username || secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          CONFLUENCE_PAGE_ID: ${{ inputs.confluence_page_id || secrets.CONFLUENCE_PAGE_ID }}
        run: |
          python3 << 'EOF'
          import os
          import json
          import requests
          from requests.auth import HTTPBasicAuth
          
          # Confluence credentials
          confluence_url = os.environ.get('CONFLUENCE_URL')
          username = os.environ.get('CONFLUENCE_USERNAME')
          api_token = os.environ.get('CONFLUENCE_API_TOKEN')
          page_id = os.environ.get('CONFLUENCE_PAGE_ID')
          
          print("=" * 80)
          print("CONFLUENCE UPDATE PROCESS")
          print("=" * 80)
          print(f"Confluence URL: {confluence_url}")
          print(f"Username: {username}")
          print(f"Page ID: {page_id}")
          print(f"API Token: {'***' if api_token else 'NOT SET'}")
          print()
          
          if not all([confluence_url, username, api_token, page_id]):
              print("❌ Missing Confluence credentials. Skipping update.")
              print(f"  - URL: {'✓' if confluence_url else '✗'}")
              print(f"  - Username: {'✓' if username else '✗'}")
              print(f"  - API Token: {'✓' if api_token else '✗'}")
              print(f"  - Page ID: {'✓' if page_id else '✗'}")
              exit(0)
          
          # Read the HTML content to append
          print("Reading generated HTML content...")
          try:
              with open('confluence-content.html', 'r') as f:
                  new_content = f.read()
              print(f"✓ HTML content loaded ({len(new_content)} characters)")
              print()
              print("Content preview:")
              print("-" * 80)
              print(new_content[:500] + "..." if len(new_content) > 500 else new_content)
              print("-" * 80)
              print()
          except FileNotFoundError:
              print("❌ Error: confluence-content.html not found!")
              print("Available files:")
              import os
              for root, dirs, files in os.walk('.'):
                  for file in files:
                      print(f"  - {os.path.join(root, file)}")
              exit(1)
          
          # Setup authentication and headers for v2 API
          auth = HTTPBasicAuth(username, api_token)
          headers = {'Content-Type': 'application/json'}
          
          # Get current page using v2 API
          # API Reference: https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get
          print(f"Fetching current page content from Confluence...")
          get_url = f"{confluence_url}/api/v2/pages/{page_id}?body-format=storage"
          print(f"GET URL: {get_url}")
          
          response = requests.get(get_url, auth=auth, headers=headers)
          
          if response.status_code != 200:
              print(f"❌ Failed to get page: {response.status_code}")
              print(f"Response: {response.text}")
              exit(1)
          
          page_data = response.json()
          current_version = page_data['version']['number']
          current_content = page_data['body']['storage']['value']
          page_title = page_data['title']
          
          print(f"✓ Current page retrieved successfully")
          print(f"  - Title: {page_title}")
          print(f"  - Current version: {current_version}")
          print(f"  - Current content length: {len(current_content)} characters")
          print()
          
          # Append new content to existing content
          updated_content = current_content + "\n" + new_content
          print(f"Preparing update...")
          print(f"  - New content length: {len(updated_content)} characters")
          print()
          
          # Update the page using v2 API
          # API Reference: https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-put
          update_data = {
              "id": page_id,
              "status": "current",
              "title": page_title,
              "body": {
                  "representation": "storage",
                  "value": updated_content
              },
              "version": {
                  "number": current_version + 1,
                  "message": "Updated by GitHub Actions - Maven dependency updates"
              }
          }
          
          put_url = f"{confluence_url}/api/v2/pages/{page_id}"
          print(f"Updating page...")
          print(f"PUT URL: {put_url}")
          print(f"New version: {current_version + 1}")
          
          response = requests.put(put_url, auth=auth, headers=headers, json=update_data)
          
          if response.status_code == 200:
              print()
              print("=" * 80)
              print("✓ SUCCESS - Confluence page updated!")
              print("=" * 80)
              print(f"Page URL: {confluence_url}/pages/viewpage.action?pageId={page_id}")
              print(f"Updated to version: {current_version + 1}")
              print()
          else:
              print()
              print("=" * 80)
              print(f"❌ FAILED - Could not update page: {response.status_code}")
              print("=" * 80)
              print(f"Response: {response.text}")
              print()
              exit(1)
          EOF
      
      - name: Upload artifacts
        if: steps.diff.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-updates
          path: |
            confluence-content.html
            changes.json
            java/my-app/pom-diff.txt
