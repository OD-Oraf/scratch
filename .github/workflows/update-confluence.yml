name: Update Confluence with Dependency Changes

on:
  workflow_run:
    workflows: ["Update Maven Dependencies"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      confluence_url:
        description: 'Confluence URL'
        required: false
        default: 'https://odoraf.atlassian.ne/wiki'
      confluence_username:
        description: 'Confluence username/email'
        required: false
        default: 'poseidonog@gmail.com'
      confluence_page_id:
        description: 'Confluence page ID to update'
        required: false
        default: '1'

jobs:
  update-confluence:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download artifacts from previous workflow
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: dependency-updates
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 lxml
      
      - name: Parse dependency changes
        id: parse
        run: |
          python3 << 'EOF'
          import re
          import json
          from datetime import datetime
          
          def parse_pom_diff(diff_file):
              """Parse the pom.xml diff to extract dependency changes."""
              changes = []
              
              try:
                  with open(diff_file, 'r') as f:
                      diff_content = f.read()
                  
                  # Pattern to match version changes in diff
                  # Looking for lines like: <version>1.2.3</version> -> <version>1.2.4</version>
                  lines = diff_content.split('\n')
                  
                  current_artifact = None
                  old_version = None
                  new_version = None
                  
                  for i, line in enumerate(lines):
                      # Look for artifactId
                      artifact_match = re.search(r'<artifactId>(.*?)</artifactId>', line)
                      if artifact_match:
                          current_artifact = artifact_match.group(1)
                      
                      # Look for removed version (old)
                      if line.startswith('<') and '<version>' in line:
                          version_match = re.search(r'<version>(.*?)</version>', line)
                          if version_match:
                              old_version = version_match.group(1)
                      
                      # Look for added version (new)
                      if line.startswith('>') and '<version>' in line:
                          version_match = re.search(r'<version>(.*?)</version>', line)
                          if version_match:
                              new_version = version_match.group(1)
                      
                      # If we have a complete change, record it
                      if current_artifact and old_version and new_version:
                          changes.append({
                              'artifact': current_artifact,
                              'old_version': old_version,
                              'new_version': new_version
                          })
                          current_artifact = None
                          old_version = None
                          new_version = None
              
              except FileNotFoundError:
                  print("No diff file found")
              
              return changes
          
          # Parse the changes
          changes = parse_pom_diff('pom-diff.txt')
          
          # Generate Confluence HTML content
          html_content = f"""
          <h2>Maven Dependency Updates - {datetime.now().strftime('%Y-%m-%d')}</h2>
          <p>The following dependencies were updated:</p>
          <table>
            <thead>
              <tr>
                <th>Artifact</th>
                <th>Old Version</th>
                <th>New Version</th>
              </tr>
            </thead>
            <tbody>
          """
          
          for change in changes:
              html_content += f"""
              <tr>
                <td>{change['artifact']}</td>
                <td>{change['old_version']}</td>
                <td>{change['new_version']}</td>
              </tr>
          """
          
          html_content += """
            </tbody>
          </table>
          <p><strong>Total updates:</strong> """ + str(len(changes)) + """</p>
          """
          
          # Save to file
          with open('confluence-content.html', 'w') as f:
              f.write(html_content)
          
          # Save changes as JSON for GitHub output
          with open('changes.json', 'w') as f:
              json.dump(changes, f)
          
          print(f"Found {len(changes)} dependency updates")
          EOF
      
      - name: Update Confluence Page
        env:
          CONFLUENCE_URL: ${{ inputs.confluence_url || secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ inputs.confluence_username || secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          CONFLUENCE_PAGE_ID: ${{ inputs.confluence_page_id || secrets.CONFLUENCE_PAGE_ID }}
        run: |
          python3 << 'EOF'
          import os
          import json
          import requests
          from requests.auth import HTTPBasicAuth
          
          # Confluence credentials
          confluence_url = os.environ.get('CONFLUENCE_URL')
          username = os.environ.get('CONFLUENCE_USERNAME')
          api_token = os.environ.get('CONFLUENCE_API_TOKEN')
          page_id = os.environ.get('CONFLUENCE_PAGE_ID')
          
          if not all([confluence_url, username, api_token, page_id]):
              print("Missing Confluence credentials. Skipping update.")
              exit(0)
          
          # Read the HTML content
          with open('confluence-content.html', 'r') as f:
              new_content = f.read()
          
          # Get current page version
          auth = HTTPBasicAuth(username, api_token)
          headers = {'Content-Type': 'application/json'}
          
          get_url = f"{confluence_url}/rest/api/content/{page_id}?expand=version,body.storage"
          response = requests.get(get_url, auth=auth, headers=headers)
          
          if response.status_code != 200:
              print(f"Failed to get page: {response.status_code}")
              print(response.text)
              exit(1)
          
          page_data = response.json()
          current_version = page_data['version']['number']
          current_content = page_data['body']['storage']['value']
          
          # Append new content to existing content
          updated_content = current_content + "\n" + new_content
          
          # Update the page
          update_data = {
              "version": {
                  "number": current_version + 1
              },
              "title": page_data['title'],
              "type": "page",
              "body": {
                  "storage": {
                      "value": updated_content,
                      "representation": "storage"
                  }
              }
          }
          
          put_url = f"{confluence_url}/rest/api/content/{page_id}"
          response = requests.put(put_url, auth=auth, headers=headers, json=update_data)
          
          if response.status_code == 200:
              print("Successfully updated Confluence page!")
              print(f"Page URL: {confluence_url}/pages/viewpage.action?pageId={page_id}")
          else:
              print(f"Failed to update page: {response.status_code}")
              print(response.text)
              exit(1)
          EOF
      
      - name: Upload Confluence content
        uses: actions/upload-artifact@v4
        with:
          name: confluence-update
          path: |
            confluence-content.html
            changes.json
